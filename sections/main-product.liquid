{% comment %}
Main Product Section - RecoverSups Theme (SIMPLIFIED)
Basic product page that works reliably
{% endcomment %}

<section class="section-main-product" data-section="{{ section.id }}">
  <div class="page-width">
    <div class="product">
      
      <!-- Product Media -->
      <div class="product__media">
        {% if product.featured_media %}
          <img src="{{ product.featured_media | image_url: width: 600 }}" 
               alt="{{ product.featured_media.alt | escape }}"
               width="600" height="600">
        {% else %}
          <div class="product__media-placeholder">
            <svg width="100" height="100" viewBox="0 0 100 100">
              <rect width="100" height="100" fill="#f0f0f0"/>
              <text x="50" y="50" text-anchor="middle" dy=".3em" fill="#999">No Image</text>
            </svg>
          </div>
        {% endif %}
      </div>

      <!-- Product Info -->
      <div class="product__info">
        {%- for block in section.blocks -%}
          {%- case block.type -%}
            
            {%- when 'title' -%}
              <div class="product__block product__block--title" {{ block.shopify_attributes }}>
                <h1 class="product__title">{{ product.title }}</h1>
                {%- if block.settings.show_vendor and product.vendor != blank -%}
                  <p class="product__vendor">{{ product.vendor }}</p>
                {%- endif -%}
              </div>

            {%- when 'price' -%}
              <div class="product__block product__block--price" {{ block.shopify_attributes }}>
                <div class="price-wrapper">
                  <div class="price">
                    {% if product.compare_at_price > product.price %}
                      <span class="price__regular">
                        <span class="visually-hidden">Regular price</span>
                        {{ product.compare_at_price | money }}
                      </span>
                      <span class="price__sale">
                        <span class="visually-hidden">Sale price</span>
                        {{ product.price | money }}
                      </span>
                    {% else %}
                      <span class="price__regular">
                        {{ product.price | money }}
                      </span>
                    {% endif %}
                  </div>
                </div>
              </div>

            {%- when 'description' -%}
              <div class="product__block product__block--description" {{ block.shopify_attributes }}>
                {%- if product.description != blank -%}
                  <div class="product__description rte">
                    {{ product.description }}
                  </div>
                {%- endif -%}
              </div>

            {%- when 'variant_picker' -%}
              <div class="product__block product__block--variant-picker" {{ block.shopify_attributes }}>
                {%- unless product.has_only_default_variant -%}
                  <div class="product-form__buttons">
                    {% for option in product.options_with_values %}
                      <div class="product-form__input">
                        <label class="form__label" for="Option-{{ section.id }}-{{ forloop.index0 }}">
                          {{ option.name }}
                        </label>
                        <select name="options[{{ option.name | escape }}]" id="Option-{{ section.id }}-{{ forloop.index0 }}" class="select__select">
                          {% for value in option.values %}
                            <option value="{{ value | escape }}"{% if option.selected_value == value %} selected="selected"{% endif %}>
                              {{ value }}
                            </option>
                          {% endfor %}
                        </select>
                      </div>
                    {% endfor %}
                  </div>
                {%- endunless -%}
              </div>

            {%- when 'buy_buttons' -%}
              <div class="product__block product__block--buy-buttons" {{ block.shopify_attributes }}>
                <div class="product-form">
                  {%- form 'product', product, id: 'product-form-{{ section.id }}', class: 'form', novalidate: 'novalidate', data-type: 'add-to-cart-form' -%}
                    
                    <input type="hidden" name="id" value="{{ product.selected_or_first_available_variant.id }}">
                    
                    <div class="product-form__buttons">
                      <button type="submit" name="add" class="btn product-form__cart-submit btn--primary btn--full-width"
                              {% if product.selected_or_first_available_variant.available == false %}disabled{% endif %}>
                        <span>
                          {%- if product.selected_or_first_available_variant.available -%}
                            Add to Cart
                          {%- else -%}
                            Sold Out
                          {%- endif -%}
                        </span>
                      </button>
                    </div>
                    
                  {%- endform -%}
                </div>
              </div>

          {%- endcase -%}
        {%- endfor -%}
      </div>
    </div>
  </div>
</section>

<script>
  // Basic variant selection
  if (!customElements.get('variant-selects')) {
    customElements.define('variant-selects', class VariantSelects extends HTMLElement {
      constructor() {
        super();
        this.addEventListener('change', this.onVariantChange);
      }

      onVariantChange() {
        this.updateOptions();
        this.updateMasterId();
        this.updatePickupAvailability();
        this.removeErrorMessage();

        if (!this.currentVariant) {
          this.toggleAddButton(true, '', false);
          this.setUnavailable();
        } else {
          this.updateMedia();
          this.updateURL();
          this.updateVariantInput();
          this.renderProductInfo();
          this.updateShareUrl();
        }
      }

      updateOptions() {
        this.options = Array.from(this.querySelectorAll('select'), (select) => select.value);
      }

      updateMasterId() {
        this.currentVariant = this.getVariantData().find((variant) => {
          return !variant.options.map((option, index) => {
            return this.options[index] === option;
          }).includes(false);
        });
      }

      updateVariantInput() {
        const productForm = document.querySelector(`#product-form-${this.dataset.section}`);
        const productFormInput = productForm.querySelector('input[name="id"]');
        productFormInput.value = this.currentVariant.id;
      }

      updatePickupAvailability() {
        // Implementation would go here
      }

      removeErrorMessage() {
        // Implementation would go here
      }

      renderProductInfo() {
        // Implementation would go here
      }

      updateShareUrl() {
        // Implementation would go here
      }

      updateURL() {
        if (!this.currentVariant || this.dataset.updateUrl === 'false') return;
        window.history.replaceState({}, '', `${this.dataset.url}?variant=${this.currentVariant.id}`);
      }

      updateMedia() {
        // Implementation would go here
      }

      setUnavailable() {
        // Implementation would go here
      }

      toggleAddButton(disable = true, text, modifyClass = true) {
        const productForm = document.querySelector(`#product-form-${this.dataset.section}`);
        if (!productForm) return;
        const addButton = productForm.querySelector('[name="add"]');
        const addButtonText = productForm.querySelector('[name="add"] > span');
        if (!addButton) return;

        if (disable) {
          addButton.setAttribute('disabled', 'disabled');
          if (text) addButtonText.textContent = text;
        } else {
          addButton.removeAttribute('disabled');
          addButtonText.textContent = window.variantStrings.addToCart;
        }
      }

      getVariantData() {
        this.variantData = this.variantData || JSON.parse(this.querySelector('[type="application/json"]').textContent);
        return this.variantData;
      }
    });
  }
</script>

{% schema %}
{
  "name": "t:sections.main-product.name",
  "tag": "section",
  "class": "section",
  "blocks": [
    {
      "type": "title",
      "name": "t:sections.main-product.blocks.title.name",
      "limit": 1,
      "settings": [
        {
          "type": "checkbox",
          "id": "show_vendor",
          "default": false,
          "label": "t:sections.main-product.blocks.title.settings.show_vendor.label"
        }
      ]
    },
    {
      "type": "price",
      "name": "t:sections.main-product.blocks.price.name",
      "limit": 1,
      "settings": [
        {
          "type": "checkbox",
          "id": "show_compare_price",
          "default": true,
          "label": "t:sections.main-product.blocks.price.settings.show_compare_price.label"
        }
      ]
    },
    {
      "type": "description",
      "name": "t:sections.main-product.blocks.description.name",
      "limit": 1
    },
    {
      "type": "variant_picker", 
      "name": "t:sections.main-product.blocks.variant_picker.name",
      "limit": 1,
      "settings": [
        {
          "type": "select",
          "id": "picker_type",
          "options": [
            {
              "value": "dropdown",
              "label": "t:sections.main-product.blocks.variant_picker.settings.picker_type.options__1.label"
            },
            {
              "value": "button",
              "label": "t:sections.main-product.blocks.variant_picker.settings.picker_type.options__2.label"
            }
          ],
          "default": "button",
          "label": "t:sections.main-product.blocks.variant_picker.settings.picker_type.label"
        }
      ]
    },
    {
      "type": "buy_buttons",
      "name": "t:sections.main-product.blocks.buy_buttons.name",
      "limit": 1,
      "settings": [
        {
          "type": "checkbox",
          "id": "show_dynamic_checkout",
          "default": true,
          "label": "t:sections.main-product.blocks.buy_buttons.settings.show_dynamic_checkout.label",
          "info": "t:sections.main-product.blocks.buy_buttons.settings.show_dynamic_checkout.info"
        }
      ]
    }
  ],
  "settings": [
    {
      "type": "select",
      "id": "gallery_layout",
      "options": [
        {
          "value": "stacked",
          "label": "t:sections.main-product.settings.gallery_layout.options__1.label"
        },
        {
          "value": "single",
          "label": "t:sections.main-product.settings.gallery_layout.options__2.label"
        }
      ],
      "default": "stacked",
      "label": "t:sections.main-product.settings.gallery_layout.label"
    },
    {
      "type": "select",
      "id": "media_size",
      "options": [
        {
          "value": "small",
          "label": "t:sections.main-product.settings.media_size.options__1.label"
        },
        {
          "value": "medium",
          "label": "t:sections.main-product.settings.media_size.options__2.label"
        },
        {
          "value": "large",
          "label": "t:sections.main-product.settings.media_size.options__3.label"
        }
      ],
      "default": "medium",
      "label": "t:sections.main-product.settings.media_size.label"
    },
    {
      "type": "select",
      "id": "media_position",
      "options": [
        {
          "value": "left",
          "label": "t:sections.main-product.settings.media_position.options__1.label"
        },
        {
          "value": "right",
          "label": "t:sections.main-product.settings.media_position.options__2.label"
        }
      ],
      "default": "left",
      "label": "t:sections.main-product.settings.media_position.label"
    },
    {
      "type": "checkbox",
      "id": "enable_sticky_info",
      "default": true,
      "label": "t:sections.main-product.settings.enable_sticky_info.label"
    },
    {
      "type": "header",
      "content": "t:sections.all.padding.section_padding_heading"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_top",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_bottom",
      "default": 12
    }
  ]
}
{% endschema %}